#!/usr/bin/env python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
from gi.repository import GObject as gobject
from gi.repository import GLib as glib
import os
import subprocess
import sys
import re
import pkg_resources
import utils

REFRESH_INTERVAL = 5000
ICONS_DIR='/usr/share/expressvpn-tray'

class ExpressVpnTray:
  def __init__(self, logger):
    # Remember logger.
    self.logger = logger

    # Check status.
    self.vpn_status = utils.status()
    self.is_connected = 'Not connected' not in self.vpn_status
    self.locations = utils.locations()

    # Create tray icon.
    self.tray = Gtk.StatusIcon()
    self.tray.connect('popup-menu', self.on_right_click)
    
    # Update tray icon
    self.update_icon()
    
    # Setup refresh interval
    self.refresh(self.tray)
  
  def on_right_click(self, icon, event_button, event_time):
    self.make_menu(event_button, event_time)
  
  def make_menu(self, event_button, event_time):
    menu = Gtk.Menu()
    
    # Status
    status = Gtk.MenuItem("Status: " + self.vpn_status)
    status.set_sensitive(False)
    status.show()
    menu.append(status)
    
    # Connect/Disconnect
    toggle = Gtk.MenuItem('Disconnect' if self.is_connected else 'Connect to last location')
    toggle.show()
    menu.append(toggle)
    toggle.connect('activate', self.toggle)

    # Smart locations.
    if not self.is_connected:
      smart_submenu = Gtk.Menu()
      for location in self.locations:
        item = Gtk.MenuItem(location.title)
        item.show()
        item.connect('activate', self.connect, location.id)
        smart_submenu.append(item)
      
      smart = Gtk.MenuItem('Recommended locations')
      smart.set_submenu(smart_submenu)
      smart.show()
      menu.append(smart)
    
    # Quit
    quit = Gtk.MenuItem('Quit')
    quit.show()
    menu.append(quit)
    quit.connect('activate', Gtk.main_quit)
    
    # Show the menu.
    menu.popup(None, None, None, Gtk.StatusIcon.position_menu, event_button, event_time)
  
  def toggle(self, widget):
    try:
      action = 'disconnect' if self.is_connected else 'connect'
      output = subprocess.run(['expressvpn', action], check=True, stdout=subprocess.PIPE).stdout
      self.is_connected = not self.is_connected
      self.update_icon()
    except:
      logger.write('Failed to connect.\n')
  
  def connect(self, widget, location):
    try:
      output = subprocess.run(['expressvpn', 'connect', location], check=True, stdout=subprocess.PIPE).stdout
      self.is_connected = not self.is_connected
      self.update_icon()
    except:
      logger.write('Failed to connect to ' + location + '.\n')
  
  def update_icon(self):
    self.tray.set_from_file(ICONS_DIR+'/expressvpn-tray-connected.png' if self.is_connected else ICONS_DIR+'/expressvpn-tray-not-connected.png')
  
  def refresh(self, widget):
    try:
      # Check status.
      self.vpn_status = utils.status()
      self.is_connected = 'Not connected' not in self.vpn_status
       
      # Update tray icon
      self.update_icon()
      
      # Update the list of smart locations.
      self.locations = utils.locations()
      
      # Schedule next refresh.
      glib.timeout_add(REFRESH_INTERVAL, self.refresh, self.tray)
    except:
      logger.write('Failed to refresh status\n')
      self.vpn_status = status

if __name__ == "__main__":
  print(__file__)  
  
  # Create log file.
  logger = sys.stderr
  sys.stderr = logger
  
  # Instantiate the app.
  app = ExpressVpnTray(logger)
  Gtk.main()

